dt_selected_sub <- dt_selected_sub %>% mutate(HGVSpc = coalesce(HGVSp, HGVSc))
dt_selected_sub <- dt_selected_sub %>% filter(AF.x < 0.3)
# tests
df_mthfr <-  dt_selected_sub|> filter(SYMBOL == "MTHFR")
df_mmachc <-  dt_selected_sub|> filter(SYMBOL == "MMACHC")
df_tcn2 <-  dt_selected_sub|> filter(SYMBOL == "TCN2")
df_mmachc$HGVSpc |> unique()
df_mthfr$HGVSpc |> unique()
df_tcn2$HGVSpc |> unique()
# # expected vs small
# MMACHC	2 variants (55 cases)	 - 4 found
# MTHFR (39 cases)	38 variants	- 22 found
# TCN2 (1 case) - 6 found
#
# # expected versus autodetected
# MMACHC	2 variants (55 cases)	 - 5 found variants
# MTHFR (39 cases)	38 variants	- 23 found variants
# TCN2 (1 case) - 6 found variants
# Knwon
# ENST00000215838.8:c.172del;ENST00000405742.7:c.172del;ENST00000407817.3:c.172del;ENST00000423350.1:n.501del;ENST00000450638.5:c.97del;ENST00000471659.2:n.343del;ENST00000698263.1:c.172del;ENST00000698264.1:n.343del;ENST00000698265.1:c.172del;ENST00000698266.1:c.172del;ENST00000698267.1:c.172del;ENST00000698268.1:c.172del;ENST00000698269.1:c.172del;ENST00000698270.1:c.172del;ENST00000698271.1:c.172del;ENST00000698272.1:c.172del;ENST00000698273.1:c.163del	ENSP00000215838.3:p.Leu58TyrfsTer28;ENSP00000385914.3:p.Leu58TyrfsTer28;ENSP00000384914.3:p.Leu58TyrfsTer28;ENSP00000394184.2:p.Leu33TyrfsTer28;ENSP00000513635.1:p.Leu58TyrfsTer28;ENSP00000513636.1:p.Leu58TyrfsTer28;ENSP00000513637.1:p.Leu58TyrfsTer28;ENSP00000513638.1:p.Leu58TyrfsTer28;ENSP00000513639.1:p.Leu58TyrfsTer28;ENSP00000513640.1:p.Leu58TyrfsTer28;ENSP00000513641.1:p.Leu58TyrfsTer28;ENSP00000513642.1:p.Leu58TyrfsTer28;ENSP00000513643.1:p.Leu58TyrfsTer28;ENSP00000513644.1:p.Leu55TyrfsTer28 = missing note non-canonical
# ENST00000401061.9:c.271dup = Yes
# ENST00000401061.9:c.394C>T = Yes
# filters
# dt_selected_sub <- dt_selected_sub |> filter(gnomAD_AF < 0.4)
# dt_selected_sub <- dt_selected_sub |> filter(MAX_AF < 0.4)
# Splitting the string based on "NGS" and creating a new column
dt_selected_sub <- dt_selected_sub %>%
mutate(sample.id_meta = str_extract(sample.id, "NGS.*"),
sample.id = str_remove(sample.id, "NGS.*"))
# # To print reports in order of highest rank guru score
# # Step 1: Group by 'sample.id'
# # Step 2: Calculate the max 'ACMG_total_score' for each 'sample.id'
# # Step 3: Arrange the dataframe based on the max score
# # Calculate max score for each sample and rank them
# dt_selected_sub_ranked_samples <- dt_selected_sub %>%
#   group_by(sample.id) %>%
#   summarise(max_score_in_case = max(ACMG_total_score, na.rm = TRUE)) %>%
#   arrange(desc(max_score_in_case)) %>%
#   mutate(case_rank_in_cohort = row_number()) %>%  # Add a rank column
#   ungroup()
#
# # Join back to get the other columns
# dt_selected_sub_ranked <- dt_selected_sub_ranked_samples %>%
#   left_join(dt_selected_sub, by = "sample.id")
#
# dt_selected_sub <- dt_selected_sub_ranked
# rm(dt_selected_sub_ranked, dt_selected_sub_ranked_samples)
#
# To print reports in order of highest rank guru score
# Step 1: Group by 'sample.id'
# Step 2: Calculate the max 'ACMG_total_score' for each 'sample.id'
# Step 3: Arrange the dataframe based on the max score
# Calculate max score for each sample and rank them
print("This step causes some known hits to drop in MTHFR, MMACHC since they don't have the highest score.")
# dt_selected_sub_ranked_samples <- dt_selected_sub %>%
#   group_by(sample.id) %>%
#   summarise(max_score_in_case = max(ACMG_total_score, na.rm = TRUE)) %>%
#   arrange(desc(max_score_in_case)) %>%
#   mutate(case_rank_in_cohort = row_number()) %>%  # Add a rank column
#   ungroup()
#
# # Join back to get the other columns
# dt_selected_sub_ranked <- dt_selected_sub_ranked_samples %>%
#   left_join(dt_selected_sub, by = "sample.id")
print("Rule: Special genes that we know cause THIS disease.")
# # Group by sample.id and consider special handling for MMACHC or MTHFR
#
# dt_selected_sub_ranked <- dt_selected_sub %>%
#   # Include a column to identify special genes
#   mutate(is_special_gene = SYMBOL %in% c("MMACHC", "MTHFR")) %>%
#   # Group by sample.id
#   group_by(sample.id) %>%
#   # Calculate max score within each group
#   mutate(max_score_in_case = max(ACMG_total_score, na.rm = TRUE)) %>%
#   ungroup() %>%
#   # Filter to keep either the max score or special gene rows
#   filter(ACMG_total_score == max_score_in_case | is_special_gene) %>%
#   # Arrange by descending max score
#   arrange(desc(max_score_in_case)) %>%
#   # Create a rank column based on the arranged data
#   mutate(case_rank_in_cohort = row_number())
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
# First, rank variants within each case
dt_selected_sub <- dt_selected_sub %>%
group_by(sample.id) %>%
# Calculate the maximum score within each group to identify the top priority variant
mutate(max_score_in_case = max(ACMG_total_score, na.rm = TRUE)) %>%
ungroup()
library(dplyr)
dt_selected_sub_ranked <- dt_selected_sub %>%
mutate(is_special_gene = SYMBOL %in% c("MMACHC", "MTHFR")) %>%
group_by(sample.id) %>%
mutate(variant_rank_in_case = dense_rank(desc(is_special_gene) + desc(ACMG_total_score))) %>%
ungroup()   %>%
dplyr::select("sample.id",
# "case_rank_in_cohort",
"variant_rank_in_case",
"ACMG_total_score", "ACMG_count", "source", "SYMBOL", "HGVSp", "HGVSc",
"Consequence", "IMPACT", "genotype", "gnomAD_AF", "comp_het_flag", everything())
View(dt_selected_sub_ranked)
dt_selected_sub_ranked2 <- dt_selected_sub_ranked %>%
mutate(is_special_gene = SYMBOL %in% c("MMACHC", "MTHFR")) %>%
group_by(sample.id) %>%
mutate(case_rank_in_cohort = dense_rank(desc(is_special_gene) + desc(ACMG_total_score))) %>%
ungroup()   %>%
dplyr::select("sample.id",
# "case_rank_in_cohort",
"variant_rank_in_case",
"ACMG_total_score", "ACMG_count", "source", "SYMBOL", "HGVSp", "HGVSc",
"Consequence", "IMPACT", "genotype", "gnomAD_AF", "comp_het_flag", everything())
View(dt_selected_sub_ranked2)
dt_selected_sub_ranked2 <- dt_selected_sub_ranked %>%
mutate(is_special_gene = SYMBOL %in% c("MMACHC", "MTHFR")) %>%
group_by(sample.id) %>%
mutate(case_rank_in_cohort = dense_rank(desc(is_special_gene) + desc(ACMG_total_score))) %>%
ungroup()   %>%
dplyr::select("sample.id",
"case_rank_in_cohort",
"variant_rank_in_case",
"ACMG_total_score", "ACMG_count", "source", "SYMBOL", "HGVSp", "HGVSc",
"Consequence", "IMPACT", "genotype", "gnomAD_AF", "comp_het_flag", everything())
View(dt_selected_sub_ranked)
# dt_selected_sub_filter06 <- dt_selected_sub |> filter(ACMG_total_score > 5)
# dt_selected_sub_filter10 <- dt_selected_sub |> filter(ACMG_total_score > 9)
dt_selected_sub_rank1 <- dt_selected_sub_ranked |> filter(variant_rank_in_case < 2)
dt_selected_sub_rank2 <- dt_selected_sub_ranked |> filter(variant_rank_in_case < 3)
View(dt_selected_sub_rank1)
data.table::fwrite(dt_selected_sub_ranked, file="../../scicore_mirror/data/acmguru_data_20250107/ACMGuru_singlecase_df_report_v1_momic_samplecount_180_all_chr_filterNone.csv", sep = ",")
data.table::fwrite(dt_selected_sub_rank1, file="../../scicore_mirror/data/acmguru_data_20250107/ACMGuru_singlecase_df_report_v1_momic_samplecount_180_all_chr_rank1.csv", sep = ",")
data.table::fwrite(dt_selected_sub_rank2, file="../../scicore_mirror/data/acmguru_data_20250107/ACMGuru_singlecase_df_report_v1_momic_samplecount_180_all_chr_rank2.csv", sep = ",")
print("Merge with the cohort list of known phenotype")
out_path <- "../../scicore_mirror/data/acmguru_out_20250107/"
data_path <- "../../scicore_mirror/data/acmguru_data_20250107"
getwd()
# data clinical ----
df_clin <- read.csv2(file = paste0(data_path, "/hcy_cohort_patient_data_20240627.csv"))
df_clin$SAMPLE_NAME <- df_clin$sample_id
df_clin <- df_clin %>% dplyr::select(-sample_id)
# convert the dataset -----
df <- dt_selected_sub_rank1
df$SAMPLE_NAME <- df$sample.id
df$MAX_AF <- as.numeric(df$MAX_AF)
df <- df %>% mutate(gnomAD_AF = if_else(is.na(gnomAD_AF), 0, gnomAD_AF))
df <- df %>% mutate(MAX_AF = if_else(is.na(MAX_AF), 0, MAX_AF))
df$AF.x <- as.numeric(df$AF.x)
# Merge clinical data ----
df <- merge(df_clin, df, all.y = TRUE)
rm(df_clin)
# drop columns
df <- dplyr::select(df, -c( ACMG_score:ACMG_PP4, Strong_pathogenic_GE:Supporting_pathogenic_GE))
df$ensembl_gene_id <- df$Gene
# Get the best variant ID
df <- df %>% mutate(HGVSpc = coalesce(HGVSp, HGVSc))
df <- df %>% mutate(Symbol_Variant = paste(SYMBOL, HGVSpc, sep = " - "))
df <- df %>% dplyr::select("sample_group", "sample_subgroup",
"sample.id",
"source", "HGVSpc", "SYMBOL",
"max_score_in_case",
"case_rank_in_cohort",
"variant_rank_in_case",
"ACMG_total_score",
"ACMG_count",
"genotype", "comp_het_flag", "ensembl_gene_id", "gnomAD_AF", "MAX_AF", "MAX_AF_POPS", everything())
df <- df %>%
arrange(max_score_in_case ) %>%
arrange(case_rank_in_cohort)
df <- df %>% dplyr::select("sample_group", "sample_subgroup",
"sample.id",
"source", "HGVSpc", "SYMBOL",
"max_score_in_case",
# "case_rank_in_cohort",
"variant_rank_in_case",
"ACMG_total_score",
"ACMG_count",
"genotype", "comp_het_flag", "ensembl_gene_id", "gnomAD_AF", "MAX_AF", "MAX_AF_POPS", everything())
View(df)
df <- df %>%
arrange(max_score_in_case ) %>%
arrange(case_rank_in_cohort)
df <- df %>%
arrange(max_score_in_case ) #%>%
df_mthfr <-  df|> filter(SYMBOL == "MTHFR")
df_mmachc <-  df|> filter(SYMBOL == "MMACHC")
df_tcn2 <-  df|> filter(SYMBOL == "TCN2")
df_mmachc$HGVSpc |> unique()
df_mthfr$HGVSpc |> unique()
df_tcn2$HGVSpc |> unique()
# Optimized approach using data.table for better performance
library(data.table)
# Convert df to a data.table
df0 <- df
setDT(df0)
# Adjust the priority settings to handle NAs explicitly
df0[, priority := fifelse(is.na(source), 2, fifelse(source == "metabol", 1, 2))]
# Correctly filtering duplicates with prioritisation
df0 <- df0[order(priority)]  # Order by priority
# Remove duplicates based on all columns except 'source' and 'priority'
df0 <- df0[!duplicated(df0, by = setdiff(names(df0), c("source", "priority")))]
# Optionally, you can remove the 'priority' column if it's no longer needed
df0[, priority := NULL]
df <- df0 %>% as.data.frame()
rm(df0)
names(df)
gc()
# Biomart ----
# Assuming df is your dataframe
df_unique_genes <- unique(df$ensembl_gene_id)
# Load the biomaRt library
library(biomaRt)
# Connect to Ensembl
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
# Retrieve MIM Morbid Accession numbers for the unique genes
mim_data <- getBM(attributes = c('ensembl_gene_id', 'mim_morbid_accession', 'mim_gene_accession', 'mim_morbid_description'),
filters = 'ensembl_gene_id',
values = df_unique_genes,
mart = ensembl)
# View the first few entries of the retrieved data
head(mim_data)
# Collapse `mim_data` unique genes
collapsed_mim_data <- mim_data %>%
group_by(ensembl_gene_id) %>%
summarise(
mim_morbid_accession = paste(unique(mim_morbid_accession), collapse = ";"),
mim_gene_accession = paste(unique(mim_gene_accession), collapse = ";"),
mim_morbid_description = paste(unique(mim_morbid_description), collapse = ";"),
.groups = 'drop'
)
# Merge the MIM data back with the original dataframe
df_mim <- merge(df, collapsed_mim_data, all = TRUE, allow.cartesian = TRUE)
# View the merged dataframe
head(df_mim)
names(df_mim)
df_mim <- df_mim %>% dplyr::select("source", "HGVSpc", "mim_morbid_accession", "mim_morbid_description", "gnomAD_AF", MAX_AF, MAX_AF_POPS, everything())
df_mim <- df_mim %>%
arrange(max_score_in_case ) %>%
arrange(case_rank_in_cohort)
df_mim <- df_mim %>%
# arrange(max_score_in_case ) %>%
# arrange(case_rank_in_cohort)
df_mim$sample_subgroup %>% unique()
df_mim <- df_mim %>%
arrange(max_score_in_case ) #%>%
df_mim$sample_subgroup %>% unique()
library(dplyr)
library(stringr)
df_mim <- df_mim %>%
mutate(known_diagnosis = if_else(str_detect(sample_subgroup, ":"),
str_extract(sample_subgroup, "^[^:]+"),
sample_subgroup))
df_mim <- df_mim %>%
mutate(confirmed_diagnosis = if_else(known_diagnosis == SYMBOL, "YES", NA_character_))
df_mim  <- df_mim |> dplyr::select("sample_group", "sample_subgroup",
"sample.id",
"source", "HGVSpc", "SYMBOL",
"max_score_in_case",
"case_rank_in_cohort",
"variant_rank_in_case",
"ACMG_total_score",
"ACMG_count",
"genotype", "comp_het_flag", "ensembl_gene_id", "gnomAD_AF", "MAX_AF", "MAX_AF_POPS", everything())
df_mim  <- df_mim |> dplyr::select("sample_group", "sample_subgroup",
"sample.id",
"source", "HGVSpc", "SYMBOL",
"max_score_in_case",
# "case_rank_in_cohort",
"variant_rank_in_case",
"ACMG_total_score",
"ACMG_count",
"genotype", "comp_het_flag", "ensembl_gene_id", "gnomAD_AF", "MAX_AF", "MAX_AF_POPS", everything())
df_mim  <- df_mim |> dplyr::select(known_diagnosis, confirmed_diagnosis,  everything())
df_mim <- df_mim %>%
group_by(sample.id) %>%
# Filter rows while handling NAs correctly
filter(if (all(is.na(confirmed_diagnosis))) TRUE else confirmed_diagnosis == "YES") %>%
ungroup()
View(df_mim)
df_mim2 <- df_mim %>%
group_by(sample.id) %>%
# Filter rows while handling NAs correctly
filter(if (all(is.na(confirmed_diagnosis))) TRUE else confirmed_diagnosis == "YES") %>%
ungroup()
df_mim <- df_mim %>%
group_by(sample.id) %>%
# Filter rows while handling NAs correctly
filter(if (all(is.na(confirmed_diagnosis))) TRUE else confirmed_diagnosis == "YES") %>%
ungroup()
# Counting occurrences in known_diagnosis
known_tally <- df_mim %>%
count(known_diagnosis, sort = TRUE)  # sort = TRUE to order by frequency
# Counting occurrences in confirmed_diagnosis
confirmed_tally <- df_mim %>%
count(confirmed_diagnosis, sort = TRUE)
# Print the tallies to view them
print(known_tally)
print(confirmed_tally)
# Now, group by both known_diagnosis and confirmed_diagnosis, then count
combined_tally <- df_mim %>%
group_by(known_diagnosis, confirmed_diagnosis) %>%
summarise(count = n(), .groups = 'drop') %>%
arrange(known_diagnosis, confirmed_diagnosis)
# Print the combined tally
print(combined_tally)
# Now, group by both known_diagnosis and confirmed_diagnosis, then count
combined_tally <- df_mim %>%
group_by(known_diagnosis, confirmed_diagnosis, sample.id) %>%
summarise(count = n(), .groups = 'drop') %>%
arrange(known_diagnosis, confirmed_diagnosis)
# Print the combined tally
print(combined_tally)
# Assuming df_mim already includes the known_diagnosis and confirmed_diagnosis columns
combined_tally <- df_mim %>%
group_by(known_diagnosis, confirmed_diagnosis) %>%
summarise(count = n_distinct(sample.id), .groups = 'drop') %>%
arrange(known_diagnosis, confirmed_diagnosis)
# Print the combined tally
print(combined_tally)
25+23+56+19+19
25+23+56+19+19+38
# Assuming df_mim already includes the known_diagnosis and confirmed_diagnosis columns
combined_tally <- df_mim %>%
group_by(known_diagnosis, confirmed_diagnosis) %>%
summarise(count = n_distinct(sample.id), .groups = 'drop') %>%
arrange(known_diagnosis, confirmed_diagnosis)
# Print the combined tally
print(combined_tally)
25+23+56+19+19+38
# Assuming df_mim already includes the known_diagnosis and confirmed_diagnosis columns
combined_tally <- df_mim %>%
group_by(known_diagnosis, confirmed_diagnosis) %>%
summarise(count = n_distinct(sample.id), .groups = 'drop') %>%
mutate(total = sum(count))  # Calculate total cases across all groups
# Calculate the percentage of total diagnosed cases for each group
combined_tally <- combined_tally %>%
mutate(percentage = (count / total) * 100) %>%
select(-total)  # Remove the total column if it's no longer needed
# Assuming df_mim already includes the known_diagnosis and confirmed_diagnosis columns
combined_tally <- df_mim %>%
group_by(known_diagnosis, confirmed_diagnosis) %>%
summarise(count = n_distinct(sample.id), .groups = 'drop') %>%
mutate(total = sum(count))  # Calculate total cases across all groups
# Calculate the percentage of total diagnosed cases for each group
combined_tally <- combined_tally %>%
mutate(percentage = (count / total) * 100) %>%
dplyr::select(-total)  # Remove the total column if it's no longer needed
# Print the combined tally with percentages
print(combined_tally)
View(df_mim)
df_mim <- df_mim %>%
arrange(max_score_in_case ) %>%
arrange(known_diagnosis, confirmed_diagnosis)
df_mim <- df_mim %>%
arrange(max_score_in_case ) %>%
arrange(known_diagnosis, confirmed_diagnosis, ACMG_total_score)
df_mim <- df_mim %>%
dplyr::select("sample.id",
known_diagnosis, confirmed_diagnosis,
# "case_rank_in_cohort",
"variant_rank_in_case",
"ACMG_total_score", "ACMG_count", "source", "SYMBOL", "HGVSp", "HGVSc",
"Consequence", "IMPACT", "genotype", "gnomAD_AF", "comp_het_flag", everything())
df_mim <- df_mim %>%
arrange(max_score_in_case ) %>%
arrange(confirmed_diagnosis, known_diagnosis , ACMG_total_score)
df_mim <- df_mim %>%
dplyr::select("sample.id",
known_diagnosis, confirmed_diagnosis,
# "case_rank_in_cohort",
"variant_rank_in_case",
"ACMG_total_score", "ACMG_count", "source", "SYMBOL", "HGVSp", "HGVSc",
"Consequence", "IMPACT", "genotype", "gnomAD_AF", "comp_het_flag", everything())
# Calculate the percentage of total diagnosed cases for each group
combined_tally <- combined_tally %>%
mutate("cohort%" = (count / total) * 100) %>%
dplyr::select(-total)  # Remove the total column if it's no longer needed
# Assuming df_mim already includes the known_diagnosis and confirmed_diagnosis columns
combined_tally <- df_mim %>%
group_by(known_diagnosis, confirmed_diagnosis) %>%
summarise(count = n_distinct(sample.id), .groups = 'drop') %>%
mutate(total = sum(count))  # Calculate total cases across all groups
# Calculate the percentage of total diagnosed cases for each group
combined_tally <- combined_tally %>%
mutate("cohort%" = (count / total) * 100) %>%
dplyr::select(-total)  # Remove the total column if it's no longer needed
# Print the combined tally with percentages
print(combined_tally)
df_mim  <- df_mim |> dplyr::select("sample_group", "sample_subgroup",
"sample.id",
"source", "HGVSpc", "SYMBOL",
"max_score_in_case",
# "case_rank_in_cohort",
"variant_rank_in_case",
"ACMG_total_score",
"ACMG_count",
"genotype", "comp_het_flag",
'mim_morbid_accession', 'mim_gene_accession', 'mim_morbid_description'
"ensembl_gene_id", "gnomAD_AF", "MAX_AF", "MAX_AF_POPS", everything())
df_mim  <- df_mim |> dplyr::select(known_diagnosis, confirmed_diagnosis,  everything())
df_mim  <- df_mim |> dplyr::select("sample_group", "sample_subgroup",
"sample.id",
"source", "HGVSpc", "SYMBOL",
"max_score_in_case",
# "case_rank_in_cohort",
"variant_rank_in_case",
"ACMG_total_score",
"ACMG_count",
"genotype", "comp_het_flag",
'mim_morbid_accession', 'mim_gene_accession', 'mim_morbid_description',
"ensembl_gene_id", "gnomAD_AF", "MAX_AF", "MAX_AF_POPS", everything())
df_mim  <- df_mim |> dplyr::select(known_diagnosis, confirmed_diagnosis,  everything())
df_mim <- df_mim %>%
group_by(sample.id) %>%
# Filter rows while handling NAs correctly
filter(if (all(is.na(confirmed_diagnosis))) TRUE else confirmed_diagnosis == "YES") %>%
ungroup()
# Counting occurrences in known_diagnosis
known_tally <- df_mim %>%
count(known_diagnosis, sort = TRUE)  # sort = TRUE to order by frequency
# Counting occurrences in confirmed_diagnosis
confirmed_tally <- df_mim %>%
count(confirmed_diagnosis, sort = TRUE)
# Print the tallies to view them
print(known_tally)
print(confirmed_tally)
library(dplyr)
library(dplyr)
# Assuming df_mim already includes the known_diagnosis and confirmed_diagnosis columns
combined_tally <- df_mim %>%
group_by(known_diagnosis, confirmed_diagnosis) %>%
summarise(count = n_distinct(sample.id), .groups = 'drop') %>%
mutate(total = sum(count))  # Calculate total cases across all groups
# Calculate the percentage of total diagnosed cases for each group
combined_tally <- combined_tally %>%
mutate("cohort%" = (count / total) * 100) %>%
dplyr::select(-total)  # Remove the total column if it's no longer needed
# Print the combined tally with percentages
print(combined_tally)
df_mim <- df_mim |> select(sample.id:AF.x)
df_mim <- df_mim |> dplyr::select(sample.id:AF.x)
data.table::fwrite(df_mim, file="../../scicore_mirror/data/acmguru_data_20250107/ACMGuru_singlecase_df_report_v1_momic_samplecount_180_all_chr_rank1_mim.csv", sep = ",")
# Merge the MIM data back with the original dataframe
df_mim <- merge(df, collapsed_mim_data, all = TRUE, allow.cartesian = TRUE)
# View the merged dataframe
head(df_mim)
names(df_mim)
df_mim <- df_mim %>% dplyr::select("source", "HGVSpc", "mim_morbid_accession", "mim_morbid_description", "gnomAD_AF", MAX_AF, MAX_AF_POPS, everything())
df_mim <- df_mim %>%
arrange(max_score_in_case ) #%>%
df_mim$sample_subgroup %>% unique()
library(dplyr)
library(stringr)
df_mim <- df_mim %>%
mutate(known_diagnosis = if_else(str_detect(sample_subgroup, ":"),
str_extract(sample_subgroup, "^[^:]+"),
sample_subgroup))
df_mim <- df_mim %>%
mutate(confirmed_diagnosis = if_else(known_diagnosis == SYMBOL, "YES", NA_character_))
df_mim  <- df_mim |> dplyr::select("sample_group", "sample_subgroup",
"sample.id",
"source", "HGVSpc", "SYMBOL",
"max_score_in_case",
# "case_rank_in_cohort",
"variant_rank_in_case",
"ACMG_total_score",
"ACMG_count",
"genotype", "comp_het_flag",
'mim_morbid_accession', 'mim_gene_accession', 'mim_morbid_description',
"ensembl_gene_id", "gnomAD_AF", "MAX_AF", "MAX_AF_POPS", everything())
df_mim  <- df_mim |> dplyr::select(known_diagnosis, confirmed_diagnosis,  everything())
df_mim <- df_mim %>%
group_by(sample.id) %>%
# Filter rows while handling NAs correctly
filter(if (all(is.na(confirmed_diagnosis))) TRUE else confirmed_diagnosis == "YES") %>%
ungroup()
# Counting occurrences in known_diagnosis
known_tally <- df_mim %>%
count(known_diagnosis, sort = TRUE)  # sort = TRUE to order by frequency
# Counting occurrences in confirmed_diagnosis
confirmed_tally <- df_mim %>%
count(confirmed_diagnosis, sort = TRUE)
# Print the tallies to view them
print(known_tally)
print(confirmed_tally)
library(dplyr)
library(dplyr)
# Assuming df_mim already includes the known_diagnosis and confirmed_diagnosis columns
combined_tally <- df_mim %>%
group_by(known_diagnosis, confirmed_diagnosis) %>%
summarise(count = n_distinct(sample.id), .groups = 'drop') %>%
mutate(total = sum(count))  # Calculate total cases across all groups
# Calculate the percentage of total diagnosed cases for each group
combined_tally <- combined_tally %>%
mutate("cohort%" = (count / total) * 100) %>%
dplyr::select(-total)  # Remove the total column if it's no longer needed
# Print the combined tally with percentages
print(combined_tally)
25+23+56+19+19+38
df_mim <- df_mim %>%
arrange(max_score_in_case ) %>%
arrange(confirmed_diagnosis, known_diagnosis , ACMG_total_score)
df_mim <- df_mim %>%
dplyr::select("sample.id",
"known_diagnosis", "confirmed_diagnosis",
# "case_rank_in_cohort",
"variant_rank_in_case",
"ACMG_total_score", "ACMG_count", "source", "SYMBOL", "HGVSp", "HGVSc",
"Consequence", "IMPACT", "genotype", "gnomAD_AF", "comp_het_flag", everything())
df_mim <- df_mim |> dplyr::select(sample.id:AF.x)
data.table::fwrite(df_mim, file="../../scicore_mirror/data/acmguru_data_20250107/ACMGuru_singlecase_df_report_v1_momic_samplecount_180_all_chr_rank1_mim.csv", sep = ",")
