maindataset$sample.id |> unique() |> length()
case_count_test <- 142
source("5_launch_report.R")
View(maindataset)
case_count_test
source("5_launch_report.R")
unique_ids
unique(maindataset$sample.id)
unique_ids <- unique(maindataset$sample.id)
unique_ids
source("5_launch_report.R")
unique_ids
maindataset$sample.id
for(sample_id in unique_ids) {
print(paste("Now running report: ", sample_id))
print(paste("..............................."))
current_data <- maindataset[maindataset$sample.id == sample_id, ]
serialized_data <- serialize(current_data, NULL)
data_checksum <- digest(serialized_data, algo = "md5")
print(paste("Data checksum for sample ID", sample_id, ":", data_checksum))
current_data <- current_data |> unique()
current_data <- current_data |>
filter(sample.id == sample.id) |>
slice(1:10) |>
as.data.frame()
current_rank <- current_data$rank |> unique()
print(paste("rank:", current_rank))
report_path <- paste0("../reports/sample_", sample_id , "_report_priority_", current_rank, ".pdf")
render("report.Rmd", output_file = report_path,
params = list(
singlecase_ID = sample_id,
data_checksum = data_checksum,
pdf_list = pdf_list
),
quiet = TRUE)
log_file <-  paste0("./sample_", sample_id , "_report_priority_", current_rank,  ".log")
file.remove(log_file)
print(paste("Done."))
}
head(unique_ids)
# for(sample_id in unique_ids) {
for(sample_id in "HCY076") {
print(paste("Now running report: ", sample_id))
print(paste("..............................."))
current_data <- maindataset[maindataset$sample.id == sample_id, ]
serialized_data <- serialize(current_data, NULL)
data_checksum <- digest(serialized_data, algo = "md5")
print(paste("Data checksum for sample ID", sample_id, ":", data_checksum))
current_data <- current_data |> unique()
current_data <- current_data |>
filter(sample.id == sample.id) |>
slice(1:10) |>
as.data.frame()
current_rank <- current_data$rank |> unique()
print(paste("rank:", current_rank))
report_path <- paste0("../reports/sample_", sample_id , "_report_priority_", current_rank, ".pdf")
render("report.Rmd", output_file = report_path,
params = list(
singlecase_ID = sample_id,
data_checksum = data_checksum,
pdf_list = pdf_list
),
quiet = TRUE)
log_file <-  paste0("./sample_", sample_id , "_report_priority_", current_rank,  ".log")
file.remove(log_file)
print(paste("Done."))
}
# for(sample_id in unique_ids) {
for(sample_id in "HCY074") {
print(paste("Now running report: ", sample_id))
print(paste("..............................."))
current_data <- maindataset[maindataset$sample.id == sample_id, ]
serialized_data <- serialize(current_data, NULL)
data_checksum <- digest(serialized_data, algo = "md5")
print(paste("Data checksum for sample ID", sample_id, ":", data_checksum))
current_data <- current_data |> unique()
current_data <- current_data |>
filter(sample.id == sample.id) |>
slice(1:10) |>
as.data.frame()
current_rank <- current_data$rank |> unique()
print(paste("rank:", current_rank))
report_path <- paste0("../reports/sample_", sample_id , "_report_priority_", current_rank, ".pdf")
render("report.Rmd", output_file = report_path,
params = list(
singlecase_ID = sample_id,
data_checksum = data_checksum,
pdf_list = pdf_list
),
quiet = TRUE)
log_file <-  paste0("./sample_", sample_id , "_report_priority_", current_rank,  ".log")
file.remove(log_file)
print(paste("Done."))
}
sample_id
current_data <- maindataset[maindataset$sample.id == sample_id, ]
View(current_data)
current_data <- maindataset[maindataset$sample.id == sample_id, ]
serialized_data <- serialize(current_data, NULL)
data_checksum <- digest(serialized_data, algo = "md5")
print(paste("Data checksum for sample ID", sample_id, ":", data_checksum))
current_data <- current_data |> unique()
current_data <- current_data |>
filter(sample.id == sample.id) |>
slice(1:10) |>
as.data.frame()
View(current_data)
current_rank <- current_data$rank |> unique()
current_rank
print(paste("rank:", current_rank))
current_rank <- current_data$rank |> unique() |> max()
current_rank
current_rank <- current_data$rank |> unique() |> min()
current_rank
# current_rank <- current_data$rank |> unique()
current_rank <- min(current_data$rank)
print(paste("rank:", current_rank))
# custom -----
prior_score_weight <- 20 # known disease panel
case_count_test <- 142
source("5_launch_report.R")
case_count_test <- 142
source("5_launch_report.R")
View(maindataset)
maindataset_top <- maindataset |>
group_by(sample.id) |>
slice_max(ACMG_total_score, n = 1, with_ties = FALSE)
View(maindataset_top)
maindataset_top <- maindataset |>
group_by(sample.id) |>
slice_max(ACMG_total_score, n = 1, with_ties = FALSE) |>
select(sample.id, ACMG_total_score, SYMBOL, HGVSp, HGVSc, everything())
maindataset_top |>
group_by(SYMBOL) |>
summarise(n = n_distinct(sample.id))
maindataset_top <- maindataset |>
group_by(sample.id) |>
group_modify(~ {
if (any(.x$SYMBOL %in% c("MMACHC", "MTHFR"))) {
slice(.x, 1)
} else {
slice_max(.x, ACMG_total_score, n = 1, with_ties = FALSE)
}
}) |>
ungroup() |>
select(sample.id, ACMG_total_score, SYMBOL, HGVSp, HGVSc, everything())
maindataset_top |>
group_by(SYMBOL) |>
summarise(n = n_distinct(sample.id))
View(dt_selected_sub)
maindataset <- readRDS(file = "../data/preprocessed/ACMGuru_singlecase_df_raw_v1_momic_samplecount_180_all.Rds")
maindataset |> filter(sample.id == HCY001)
maindataset |> filter(sample.id == "HCY001")
maindataset |> filter(sample.id == "HCY001") |> filter(SYMBOL == "MTHFR")
maindataset |> filter(sample.id == "HCY002") |> filter(SYMBOL == "MTHFR")
test <- maindataset |> filter(sample.id == "HCY002") |> filter(SYMBOL == "MTHFR")
View(test)
test <- maindataset |> filter(sample.id == "HCY041") |> filter(SYMBOL == "MMACHC")
test
View(test)
maindataset |> filter(HGVSp == "ENSP00000365770.1:p.Leu639Pro")
library(rmarkdown)
library(dplyr)
library(knitr)
library(stringr)
library(digest)
library(ggplot2)
library(ggrepel)
results[1]
test <- results[1]
View(test)
test <- results[1] |> as.data.frame()
unique_ids
head(unique_ids, case_count_test)
library(rmarkdown)
library(dplyr)
library(knitr)
library(stringr)
library(digest)
library(ggplot2)
library(ggrepel)
# custom -----
prior_score_weight <- 20 # known disease panel
case_count_test <- 142
print(paste("Number of cases to run:", case_count_test))
print("Look at MaxScore and descide how many candidates to report.")
source("1_import_paths.R")
results <- vector("list", length(file_list))
for (i in seq_along(file_list)) {
print(paste("importing file", i))
dt_selected_sub <- readRDS(file_list[i])
print(paste(i, "cleaning"))
source("2_import_clean.R")
print(paste(i, "priors"))
source("3_import_priors.R")
print(paste(i, "formatting"))
source("4_import_format.R")
print(paste(i, "storing"))
results[[i]] <- maindataset
rm(maindataset)
gc()
}
maindataset <- bind_rows(results)
maindataset |> filter(HGVSp == "ENSP00000365770.1:p.Leu639Pro")
View(maindataset)
test <- maindataset |> filter(sample.id == "HCY041") |> filter(SYMBOL == "MMACHC")
test <- maindataset |> filter(sample.id == "HCY041") |> filter(SYMBOL == "MTHFR")
test <- maindataset |> filter(sample.id == "HCY007") |> filter(SYMBOL == "MTHFR")
maindataset |> filter(HGVSp == "ENSP00000365770.1:p.Leu639Pro")
View(dt_selected_sub)
dt_selected_sub |> filter(HGVSp == "ENSP00000365770.1:p.Leu639Pro")
test <- |> filter(HGVSp == "ENSP00000365770.1:p.Leu639Pro") |> filter(sample.id == "HCY007") |> filter(SYMBOL == "MTHFR")
test <- dt_selected_sub |> filter(sample.id == "HCY007") |> filter(SYMBOL == "MTHFR")
results
file_list
vector("list", length(file_list))
source("1_import_paths.R")
results <- vector("list", length(file_list))
for (i in seq_along(file_list)) {
print(paste("importing file", i))
dt_selected_sub <- readRDS(file_list[i])
print(paste(i, "cleaning"))
source("2_import_clean.R")
print(paste(i, "priors"))
source("3_import_priors.R")
print(paste(i, "formatting"))
source("4_import_format.R")
print(paste(i, "storing"))
results[[i]] <- maindataset
rm(maindataset)
gc()
}
dt_selected_sub |> filter(HGVSp == "ENSP00000365770.1:p.Leu639Pro")
test <- dt_selected_sub |> filter(sample.id == "HCY007") |> filter(SYMBOL == "MTHFR")
View(test)
test <- test |>
filter(is.na(gnomAD_AF) | gnomAD_AF < 0.5)  # painful lesson learned here chasing these NA
# only ~5% of positions have carriers
dt_selected_sub <- dt_selected_sub |> filter(genotype > 0)
dt_selected_sub <- dt_selected_sub |>
filter(is.na(gnomAD_AF) | gnomAD_AF < 0.5)  # painful lesson learned here chasing these NA
gc()
gc()
library(rmarkdown)
library(dplyr)
library(knitr)
library(stringr)
library(digest)
library(ggplot2)
library(ggrepel)
# custom -----
prior_score_weight <- 20 # known disease panel
case_count_test <- 142
print(paste("Number of cases to run:", case_count_test))
print("Look at MaxScore and descide how many candidates to report.")
source("1_import_paths.R")
# source("2_import_load_clean_priors.R")
results <- vector("list", length(file_list))
for (i in seq_along(file_list)) {
print(paste("importing file", i))
dt_selected_sub <- readRDS(file_list[i])
print(paste(i, "cleaning"))
source("2_import_clean.R")
print(paste(i, "priors"))
source("3_import_priors.R")
print(paste(i, "formatting"))
source("4_import_format.R")
print(paste(i, "storing"))
results[[i]] <- maindataset
rm(maindataset)
gc()
}
maindataset <- bind_rows(results)
saveRDS(maindataset, file = "../data/preprocessed/ACMGuru_singlecase_df_raw_v1_momic_samplecount_180_all.Rds")
maindataset_top <- maindataset |>
group_by(sample.id) |>
group_modify(~ {
if (any(.x$SYMBOL %in% c("MMACHC", "MTHFR"))) {
slice(.x, 1)
} else {
slice_max(.x, ACMG_total_score, n = 1, with_ties = FALSE)
}
}) |>
ungroup() |>
select(sample.id, ACMG_total_score, SYMBOL, HGVSp, HGVSc, everything())
maindataset_top |>
group_by(SYMBOL) |>
summarise(n = n_distinct(sample.id))
View(maindataset_top)
path_preprocessed <- "../data/preprocessed/"
data.table::fwrite(maindataset_top, file=paste0(path_preprocessed, "ACMGuru_singlecase_df_raw_v1_momic_samplecount_180_all.tsv"), sep = "\t")
maindataset_top_10 <- maindataset |>
group_by(sample.id) |>
group_modify(~ {
if (any(.x$SYMBOL %in% c("MMACHC", "MTHFR"))) {
slice(.x, 10)
} else {
slice_max(.x, ACMG_total_score, n = 10, with_ties = FALSE)
}
}) |>
ungroup() |>
select(sample.id, ACMG_total_score, SYMBOL, HGVSp, HGVSc, everything())
View(maindataset_top)
View(maindataset_top)
maindataset_top_10 <- maindataset |>
group_by(sample.id) |>
group_modify(~ {
priority_rows <- dplyr::filter(.x, SYMBOL %in% c("MMACHC", "MTHFR"))
remaining_rows <- dplyr::filter(.x, !SYMBOL %in% c("MMACHC", "MTHFR"))
n_remaining <- max(10 - nrow(priority_rows), 0)
top_remaining <- dplyr::slice_max(remaining_rows, ACMG_total_score, n = n_remaining, with_ties = FALSE)
dplyr::bind_rows(priority_rows, top_remaining)
}) |>
ungroup() |>
select(sample.id, ACMG_total_score, SYMBOL, HGVSp, HGVSc, everything())
View(maindataset_top_10)
print("Note that a new 'df' would be sourced in report.Rmd so do not use this variable without checking")
data.table::fwrite(maindataset_top, file=paste0(path_preprocessed, "ACMGuru_singlecase_df_raw_v1_momic_samplecount_180_top_1.tsv"), sep = "\t")
data.table::fwrite(maindataset, file=paste0(path_preprocessed, "ACMGuru_singlecase_df_raw_v1_momic_samplecount_180_all.tsv"), sep = "\t")
maindataset_top <- maindataset |>
group_by(sample.id) |>
group_modify(~ {
if (any(.x$SYMBOL %in% c("MMACHC", "MTHFR"))) {
slice(.x, 1)
} else {
slice_max(.x, ACMG_total_score, n = 1, with_ties = FALSE)
}
}) |>
ungroup() |>
select(sample.id, ACMG_total_score, SYMBOL, HGVSp, HGVSc, everything())
data.table::fwrite(maindataset_top, file=paste0(path_preprocessed, "ACMGuru_singlecase_df_raw_v1_momic_samplecount_180_top_1.tsv"), sep = "\t")
maindataset_top_10 <- maindataset |>
group_by(sample.id) |>
group_modify(~ {
priority_rows <- dplyr::filter(.x, SYMBOL %in% c("MMACHC", "MTHFR"))
remaining_rows <- dplyr::filter(.x, !SYMBOL %in% c("MMACHC", "MTHFR"))
n_remaining <- max(10 - nrow(priority_rows), 0)
top_remaining <- dplyr::slice_max(remaining_rows, ACMG_total_score, n = n_remaining, with_ties = FALSE)
dplyr::bind_rows(priority_rows, top_remaining)
}) |>
ungroup() |>
select(sample.id, ACMG_total_score, SYMBOL, HGVSp, HGVSc, everything())
data.table::fwrite(maindataset_top, file=paste0(path_preprocessed, "ACMGuru_singlecase_df_raw_v1_momic_samplecount_180_top_10.tsv"), sep = "\t")
print("Note that a new 'df' would be sourced in report.Rmd so do not use this variable without checking")
source("5_launch_report.R")
unique_ids
case_count_test
unique_ids
unique(maindataset$sample.id)
unique(maindataset$sample.id) |> sort()
View(maindataset_top)
source("5_launch_report.R")
data.table::fwrite(maindataset_top_10, file=paste0(path_preprocessed, "ACMGuru_singlecase_df_raw_v1_momic_samplecount_180_top_10.tsv"), sep = "\t")
names(maindataset_top_10)
maindataset2 <- bind_rows(results)
maindataset_known_gene <- maindataset_known |>
filter(SYMBOL == "MTHFR" | SYMBOL == "MMACHC")
maindataset_known_gene <- maindataset |>
filter(SYMBOL == "MTHFR" | SYMBOL == "MMACHC")
View(maindataset_known_gene)
col_names <- c("sample.id","ACMG_total_score"
"SYMBOL","HGVSp"
col_names <- c("sample.id","ACMG_total_score",
"SYMBOL","HGVSp",
"HGVSc","max_score",
"rank",
"rownames","ACMG_count",
"Consequence","IMPACT",
"genotype,gnomAD_AF",
"comp_het_flag","genotype_name",
"ACMG_criteria","MaxScore",
"SymbolCount")
col_names
maindataset_known_gene <- maindataset |>
filter(SYMBOL == "MTHFR" | SYMBOL == "MMACHC") |>
select(name %in% col_names)
maindataset_known_gene <- maindataset |>
filter(SYMBOL == "MTHFR" | SYMBOL == "MMACHC") |>
select(all_of(col_names))
col_names <- c("sample.id","ACMG_total_score",
"SYMBOL","HGVSp",
"HGVSc","max_score",
"rank",
"rownames","ACMG_count",
"Consequence","IMPACT",
"genotype, gnomAD_AF",
"comp_het_flag","genotype_name",
"ACMG_criteria","MaxScore",
"SymbolCount")
col_names
col_names <- c("sample.id","ACMG_total_score",
"SYMBOL","HGVSp",
"HGVSc","max_score",
"rank",
"rownames","ACMG_count",
"Consequence","IMPACT",
"genotype", "gnomAD_AF",
"comp_het_flag","genotype_name",
"ACMG_criteria","MaxScore",
"SymbolCount")
maindataset_known_gene <- maindataset |>
filter(SYMBOL == "MTHFR" | SYMBOL == "MMACHC") |>
select(all_of(col_names))
maindataset_known_gene <- maindataset |>
filter(SYMBOL == "MTHFR" | SYMBOL == "MMACHC") |>
select(all_of(col_names)) |>
arrange(sample.id)
data.table::fwrite(maindataset_known_gene, file=paste0(path_preprocessed, "ACMGuru_singlecase_df_raw_v1_momic_samplecount_180_known_gene.tsv"), sep = "\t")
library(rmarkdown)
library(dplyr)
library(knitr)
library(stringr)
library(digest)
library(ggplot2)
library(ggrepel)
# minimal set ----
col_names <- c("sample.id","ACMG_total_score",
"SYMBOL","HGVSp",
"HGVSc","max_score",
"rank",
"rownames","ACMG_count",
"Consequence","IMPACT",
"genotype", "gnomAD_AF",
"comp_het_flag","genotype_name",
"ACMG_criteria","MaxScore",
"SymbolCount")
# custom -----
prior_score_weight <- 20 # known disease panel
case_count_test <- 142
maindataset <- readRDS(file = "../data/preprocessed/ACMGuru_singlecase_df_raw_v1_momic_samplecount_180_all.Rds")
View(maindataset)
View(maindataset)
maindataset2 <- maindataset |>
select(all_of(col_names))
View(maindataset2)
# minimal set ----
col_names <- c("sample.id","ACMG_total_score",
"SYMBOL","HGVSp",
"HGVSc","max_score",
"rank",
"rownames","ACMG_count",
"Consequence","IMPACT",
"genotype", "gnomAD_AF",
"comp_het_flag","genotype_name",
"ACMG_criteria","MaxScore"
)
maindataset <- readRDS(file = "../data/preprocessed/ACMGuru_singlecase_df_raw_v1_momic_samplecount_180_all.Rds")
maindataset <- maindataset |>
select(all_of(col_names))
maindataset_top <- maindataset |>
group_by(sample.id) |>
group_modify(~ {
if (any(.x$SYMBOL %in% c("MMACHC", "MTHFR"))) {
slice(.x, 1)
} else {
slice_max(.x, ACMG_total_score, n = 1, with_ties = FALSE)
}
}) |>
ungroup() |>
select(sample.id, ACMG_total_score, SYMBOL, HGVSp, HGVSc, everything())
data.table::fwrite(maindataset_top, file=paste0(path_preprocessed, "ACMGuru_singlecase_df_raw_v1_momic_samplecount_180_top_1.tsv"), sep = "\t")
# General paths ----
pca_path <- "../data/PCA/"
case_out <- "../output/"
# Guru figure data ----
pdf_path <- "../data/guru/pdf"
dir.exists(pdf_path)
list.files(path = pdf_path, full.names = TRUE)
pdf_list <-list.files(path = pdf_path, full.names = TRUE)
# Genetic data ----
data_path <- "../data/guru"
dir.exists(data_path)
list.files(path = data_path, full.names = TRUE)
file_list <- list.files(path = data_path, pattern = "ACMGuru_singlecase_df_raw_v1_momic_samplecount_180_chr_", full.names = TRUE)
# cleaning processing ----
path_clean_unprocessed <- "../data/clean_unprocessed/"
path_clean_unprocessed_impact <- "../data/clean_unprocessed_impact/"
path_preprocessed <- "../data/preprocessed/"
maindataset <- maindataset |>
select(all_of(col_names))
maindataset <- readRDS(file = "../data/preprocessed/ACMGuru_singlecase_df_raw_v1_momic_samplecount_180_all.Rds")
maindataset <- maindataset |>
select(all_of(col_names))
maindataset_top <- maindataset |>
group_by(sample.id) |>
group_modify(~ {
if (any(.x$SYMBOL %in% c("MMACHC", "MTHFR"))) {
slice(.x, 1)
} else {
slice_max(.x, ACMG_total_score, n = 1, with_ties = FALSE)
}
}) |>
ungroup() |>
select(sample.id, ACMG_total_score, SYMBOL, HGVSp, HGVSc, everything())
data.table::fwrite(maindataset_top, file=paste0(path_preprocessed, "ACMGuru_singlecase_df_raw_v1_momic_samplecount_180_top_1.tsv"), sep = "\t")
maindataset_top_10 <- maindataset |>
group_by(sample.id) |>
group_modify(~ {
priority_rows <- dplyr::filter(.x, SYMBOL %in% c("MMACHC", "MTHFR"))
remaining_rows <- dplyr::filter(.x, !SYMBOL %in% c("MMACHC", "MTHFR"))
n_remaining <- max(10 - nrow(priority_rows), 0)
top_remaining <- dplyr::slice_max(remaining_rows, ACMG_total_score, n = n_remaining, with_ties = FALSE)
dplyr::bind_rows(priority_rows, top_remaining)
}) |>
ungroup() |>
select(sample.id, ACMG_total_score, SYMBOL, HGVSp, HGVSc, everything())
data.table::fwrite(maindataset_top_10, file=paste0(path_preprocessed, "ACMGuru_singlecase_df_raw_v1_momic_samplecount_180_top_10.tsv"), sep = "\t")
maindataset_known_gene <- maindataset |>
filter(SYMBOL == "MTHFR" | SYMBOL == "MMACHC") |>
arrange(sample.id)
data.table::fwrite(maindataset_known_gene, file=paste0(path_preprocessed, "ACMGuru_singlecase_df_raw_v1_momic_samplecount_180_known_gene.tsv"), sep = "\t")
print("Note that a new 'df' would be sourced in report.Rmd so do not use this variable without checking")
