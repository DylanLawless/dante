library(ollamar)
install.packages("ollamar")
library(ollamar)
# install.packages("ollamar")
library(ollamar)
test_connection()  # test connection to Ollama server
# generate a response/text based on a prompt; returns an httr2 response by default
resp <- generate("llama3.2", "tell me a 5-word story")
resp
View(resp)
resp
generate("llama3.2", "tell me a 5-word story")
# get just the text from the response object
resp_process(resp, "text")
# get the text as a tibble dataframe
resp_process(resp, "df")
# alternatively, specify the output type when calling the function initially
txt <- generate("llama3.1", "tell me a 5-word story", output = "text")
# list available models (models you've pulled/downloaded)
list_models()
resp <- generate("deepseek-r1", "tell me a 5-word story")
resp
resp_process(resp, "text")
resp <- generate("deepseek-r1", "You are writing the variant interpretation step of a clinical genetics report. It must be clear a succinct and therefore have no unrelreated content so that the reader can understand. the final output should start and end with the w machine-readable string Summary_start Summary_end so that we can format autoatically. Here are the details: We want to write a single paragraph to support table 1.
This final result will be in latex format with the section heading
\section{Biological function summary}.
resp <- generate("deepseek-r1", "You are writing the variant interpretation step of a clinical genetics report. It must be clear a succinct and therefore have no unrelreated content so that the reader can understand. the final output should start and end with the w machine-readable string Summary_start Summary_end so that we can format autoatically. Here are the details: We want to write a single paragraph to support table 1.
This final result will be in latex format with the section heading
section{Biological function summary}.
Here is a genetic variant for 1 patient in table 1 as detected by GuRu.
Based on the ACMG.score we say that this variant is pathogenic.
Table 1:
sample.id	pathway_id	SYMBOL	Variant.GRCh38	HGVSp	HGVSc	Consequence	IMPACT	genotype	Inheritance	gnomAD_AF	ACMG.score
261	22	LILRA1	chr19:54596470_T/C	ENSP00000251372.3:p.Ser414Pro	ENST00000251372.8:c.1240T>C	missense_variant	MODERATE	1	NA	0	8
Here is the get_discussion output from GuRu for this gene:
SYMBOL	Protein.names	Gene.Ontology..molecular.function.	Function..CC.
LILRA1	Leukocyte immunoglobulin-like receptor subfamily A member 1 (CD85 antigen-like family member I) (Leukocyte immunoglobulin-like receptor 6) (LIR-6) (CD antigen CD85i)	antigen binding [GO:0003823]; inhibitory MHC class I receptor activity [GO:0032396]; transmembrane signaling receptor activity [GO:0004888]	FUNCTION: May act as receptor for class I MHC antigens.
We are writing a single paragraph to support table 1 by describing the variant information and the get_discussion information about this variant in this gene to explain why it might be causal for disease by understanding the biological function. ")
# Predefined components
description_text <- "You are writing the variant interpretation step of a clinical genetics report. It must be clear and succinct and therefore have no unrelated content so that the reader can understand. The final output should start and end with the machine-readable string Summary_start Summary_end so that we can format automatically. This final result will be in LaTeX format with the section heading \\section{Biological function summary}."
# Table data and gene discussion information could be sourced from external data handling
variant_info <- "Here is a genetic variant for 1 patient in table 1 as detected by GuRu. Based on the ACMG.score we say that this variant is pathogenic."
table_1 <- "Table 1: sample.id pathway_id SYMBOL Variant.GRCh38 HGVSp HGVSc Consequence IMPACT genotype Inheritance gnomAD_AF ACMG.score 261 22 LILRA1 chr19:54596470_T/C ENSP00000251372.3:p.Ser414Pro ENST00000251372.8:c.1240T>C missense_variant MODERATE 1 NA 0 8"
gene_discussion <- "Here is the get_discussion output from GuRu for this gene: SYMBOL Protein.names Gene.Ontology..molecular.function. Function..CC. LILRA1 Leukocyte immunoglobulin-like receptor subfamily A member 1 (CD85 antigen-like family member I) (Leukocyte immunoglobulin-like receptor 6) (LIR-6) (CD antigen CD85i) antigen binding [GO:0003823]; inhibitory MHC class I receptor activity [GO:0032396]; transmembrane signaling receptor activity [GO:0004888] FUNCTION: May act as receptor for class I MHC antigens."
# Complete prompt construction for each loop
prompt <- paste(description_text, variant_info, table_1, gene_discussion, sep=" ")
data_source
# Complete prompt construction for each loop
prompt <- paste(description_text, variant_info, table_1, gene_discussion, sep=" ")
# Simulating multiple entries handling
# Assuming 'generate' function and 'resp_process' are defined to handle the generation and processing of responses
responses <- lapply(1:length(data_source), function(i) {
# Assuming data_source contains different gene data for multiple patients
# Modify prompt with actual data from data_source[i]
modified_prompt <- prompt  # Here you would modify the prompt according to data_source[i]
# Generate response
resp <- generate("llama3.1", modified_prompt)
# Process and save response
processed_text <- resp_process(resp, "text")
writeLines(processed_text, con=paste0("Output_", i, ".txt"))
return(processed_text)
})
data_source <- "x"
# Simulating multiple entries handling
# Assuming 'generate' function and 'resp_process' are defined to handle the generation and processing of responses
responses <- lapply(1:length(data_source), function(i) {
# Assuming data_source contains different gene data for multiple patients
# Modify prompt with actual data from data_source[i]
modified_prompt <- prompt  # Here you would modify the prompt according to data_source[i]
# Generate response
resp <- generate("llama3.1", modified_prompt)
# Process and save response
processed_text <- resp_process(resp, "text")
writeLines(processed_text, con=paste0("Output_", i, ".txt"))
return(processed_text)
})
# Simulating multiple entries handling
# Assuming 'generate' function and 'resp_process' are defined to handle the generation and processing of responses
responses <- lapply(1:length(data_source), function(i) {
# Assuming data_source contains different gene data for multiple patients
# Modify prompt with actual data from data_source[i]
modified_prompt <- prompt  # Here you would modify the prompt according to data_source[i]
# Generate response
resp <- generate("llama3.2", modified_prompt)
# Process and save response
processed_text <- resp_process(resp, "text")
writeLines(processed_text, con=paste0("Output_", i, ".txt"))
return(processed_text)
})
# Review responses or use them as needed
responses
# Predefined components
description_text <- "You are writing the variant interpretation step of a clinical genetics report in LaTeX format. It must be clear and succinct and therefore have no unrelated content so that the reader can understand. The final output should start and end with the machine-readable string Summary_start Summary_end so that we can format automatically. This final result will be in LaTeX format with the section heading \\section{Evidence interpretation summary}."
# Table data and gene discussion information could be sourced from external data handling
variant_info <- "Here is a genetic variant for 1 patient in table 1 as detected by GuRu. Based on the ACMG.score and the numerous complex scoring functions of GuRu we say that this variant is pathogenic."
table_1 <- "Table 1: sample.id pathway_id SYMBOL Variant.GRCh38 HGVSp HGVSc Consequence IMPACT genotype Inheritance gnomAD_AF ACMG.score 261 22 LILRA1 chr19:54596470_T/C ENSP00000251372.3:p.Ser414Pro ENST00000251372.8:c.1240T>C missense_variant MODERATE 1 NA 0 8"
gene_discussion <- "Here is the get_discussion output from GuRu for this gene: SYMBOL Protein.names Gene.Ontology..molecular.function. Function..CC. LILRA1 Leukocyte immunoglobulin-like receptor subfamily A member 1 (CD85 antigen-like family member I) (Leukocyte immunoglobulin-like receptor 6) (LIR-6) (CD antigen CD85i) antigen binding [GO:0003823]; inhibitory MHC class I receptor activity [GO:0032396]; transmembrane signaling receptor activity [GO:0004888] FUNCTION: May act as receptor for class I MHC antigens."
# Predefined components
description_text <- "You are writing the variant interpretation step of a clinical genetics report in LaTeX format. It must be clear and succinct and therefore have no unrelated content so that the reader can understand. The is important to report the provided factual evidence correctly. The final output should start and end with the machine-readable string Summary_start Summary_end so that we can format automatically. This final result will be in LaTeX format with the section heading \\section{Evidence interpretation summary}."
# Table data and gene discussion information could be sourced from external data handling
variant_info <- "Here is a genetic variant for 1 patient in table 1 as detected by GuRu. Based on the ACMG.score and the numerous complex scoring functions of GuRu we say that this variant is pathogenic."
table_1 <- "Table 1: sample.id pathway_id SYMBOL Variant.GRCh38 HGVSp HGVSc Consequence IMPACT genotype Inheritance gnomAD_AF ACMG.score 261 22 LILRA1 chr19:54596470_T/C ENSP00000251372.3:p.Ser414Pro ENST00000251372.8:c.1240T>C missense_variant MODERATE 1 NA 0 8"
gene_discussion <- "Here is the get_discussion output from GuRu for this gene: SYMBOL Protein.names Gene.Ontology..molecular.function. Function..CC. LILRA1 Leukocyte immunoglobulin-like receptor subfamily A member 1 (CD85 antigen-like family member I) (Leukocyte immunoglobulin-like receptor 6) (LIR-6) (CD antigen CD85i) antigen binding [GO:0003823]; inhibitory MHC class I receptor activity [GO:0032396]; transmembrane signaling receptor activity [GO:0004888] FUNCTION: May act as receptor for class I MHC antigens."
# Complete prompt construction for each loop
prompt <- paste(description_text, variant_info, table_1, gene_discussion, sep=" ")
data_source <- "x"
model <- "llama3.2"
model <- "deepseek-r1"
prompt
# Simulating multiple entries handling
# Assuming 'generate' function and 'resp_process' are defined to handle the generation and processing of responses
responses <- lapply(1:length(data_source), function(i) {
# Start timing
start_time <- Sys.time()
# Assuming data_source contains different gene data for multiple patients
# Modify prompt with actual data from data_source[i]
modified_prompt <- prompt  # Here you would modify the prompt according to data_source[i]
# Generate response
resp <- generate(model, modified_prompt)
# Process and save response
processed_text <- resp_process(resp, "text")
writeLines(processed_text, con=paste0("Output_", i, ".txt"))
# Calculate elapsed time
elapsed_time <- difftime(Sys.time(), start_time, units="secs")
# Print model and time taken
cat("Model used:", model, "\nTime taken:", elapsed_time, "seconds\n")
return(processed_text)
})
# Simulating multiple entries handling
# Assuming 'generate' function and 'resp_process' are defined to handle the generation and processing of responses
responses <- lapply(1:length(data_source), function(i) {
# Start timing
start_time <- Sys.time()
# Assuming data_source contains different gene data for multiple patients
# Modify prompt with actual data from data_source[i]
modified_prompt <- prompt  # Here you would modify the prompt according to data_source[i]
# Generate response
resp <- generate(model, modified_prompt, stream = TRUE)
# Process and save response
processed_text <- resp_process(resp, "text")
writeLines(processed_text, con=paste0("Output_", i, ".txt"))
# Calculate elapsed time
elapsed_time <- difftime(Sys.time(), start_time, units="secs")
# Print model and time taken
cat("Model used:", model, "\nTime taken:", elapsed_time, "seconds\n")
return(processed_text)
})
# Review responses or use them as needed
responses
responses
# Extract text within <think> tags
extracted_text <- str_extract(responses[1], "(?<=<think>).*(?=</think>)")
library(stringr)
# Extract text within <think> tags
extracted_text <- str_extract(responses[1], "(?<=<think>).*(?=</think>)")
extracted_text
responses[1]
# Extract text following the <think> tag
# Assuming that the text does not have to deal with a closing </think> tag.
extracted_text <- str_extract(responses[1], "(?<=<think>).*")
extracted_text
# Extract text following the <think> tag
# Assuming that the text does not have to deal with a closing </think> tag.
extracted_text <- str_extract(responses[1], "(</think>).*")
extracted_text
# Extract text following the <think> tag
# Assuming that the text does not have to deal with a closing </think> tag.
extracted_text <- str_extract(responses[1], "(?<=<think>).*")
extracted_text <- str_extract(responses[1], "(?<=</think>).*")
extracted_text
responses[1]
processed_text <- responses[1]
# Extract text following the </think> tag, including new lines after the tag
extracted_text <- str_extract(processed_text, "(?<=</think>\\s*\\n\\n).*")
# Extract text following the </think> tag, including new lines after the tag
extracted_text <- str_extract(processed_text, "(?<=</think>\\s*).*")
# Extract text following the </think> tag, including new lines after the tag
extracted_text <- str_extract(processed_text, "(?<=</think>\\s*).*", U_REGEX_LOOK_BEHIND_LIMIT = 100)
processed_text <- responses[1]
processed_text
# Split the text at "</think>" and take everything after it
parts <- str_split(processed_text, "</think>", 2)
parts
extracted_text <- if(length(parts[[1]]) > 1) trimws(parts[[1]][2]) else ""
extracted_text
# uniprotR ----
# install.packages('UniprotR')
library(UniprotR)
# install.packages("ollamar")
library(ollamar)
# example use ----
test_connection()  # test connection to Ollama server
